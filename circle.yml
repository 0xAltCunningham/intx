defaults:

  install-deps: &install-deps
    run:
      name: "Install dependencies"
      command: |
        sudo apt -q update
        sudo apt install -qy libgmp-dev

  environment-info: &environment-info
    run:
      name: "Environment info"
      command: |
        echo CXX: $CXX
        $CXX --version
        $CXX --version > compiler.version

  update-submodules: &update-submodules
    run:
      name: "Update git submodules"
      command: |
        git submodule update --init --recursive

  configure: &configure
    run:
      name: "Configure"
      # Build "out-of-source" to have better coverage report
      # (ninja is using relative paths otherwise).
      working_directory: ~/build
      command: |
        cmake ../project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/tmp/local $CMAKE_OPTIONS

  build: &build
    run:
      name: "Build"
      working_directory: ~/build
      command: |
        cmake --build . -- -j $BUILD_PARALLEL_JOBS
        cmake --build . --target install
        cmake --build . --target package

  test: &test
    run:
      name: "Test"
      working_directory: ~/build
      command: |
        ctest -j4 --output-on-failure --schedule-random -R ${TESTS_FILTER:-'.*'} -E ${TESTS_EXCLUDE}

  benchmark: &benchmark
    run:
      name: "Benchmark"
      working_directory: ~/build
      command: |
        test/intx-bench

  upload-coverage-data: &upload-coverage-data
    run:
      name: "Upload coverage data"
      command: |
        codecov --required --gcov-exec "$GCOV" --gcov-root ~/build


version: 2
jobs:

  linux-gcc-asan:
    environment:
      - CXX: g++-8
      - CC:  gcc-8
      - GCOV: gcov-8
      - BUILD_PARALLEL_JOBS: 4
      - BUILD_TYPE: Debug
      - CMAKE_OPTIONS: -DSANITIZE=address
    docker:
      - image: ethereum/cpp-build-env:11
    steps:
      - *install-deps
      - checkout
      - *configure
      - *build
      - *test

  linux-clang-coverage:
    environment:
      - CXX: clang++-8
      - CC:  clang-8
      - GCOV: llvm-cov-8 gcov
      - BUILD_PARALLEL_JOBS: 4
      - BUILD_TYPE: Debug
      - CMAKE_OPTIONS: -DCOVERAGE=ON
      - TESTS_FILTER: unittests
      - TESTS_EXCLUDE: random
    docker:
      - image: ethereum/cpp-build-env:11
    steps:
      - *install-deps
      - checkout
      - *configure
      - *build
      - *test
      - *upload-coverage-data


  linux-clang-ubsan:
    environment:
      - CXX: clang++-8
      - CC:  clang-8
      - BUILD_PARALLEL_JOBS: 4
      - CMAKE_OPTIONS: -DSANITIZE=undefined,implicit-conversion,nullability
      - UBSAN_OPTIONS: halt_on_error=1
    docker:
      - image: ethereum/cpp-build-env:11
    steps:
      - *install-deps
      - checkout
      - *configure
      - *build
      - *test
      - *benchmark

  fuzzing:
    environment:
      - CXX: clang++-8
      - CC:  clang-8
      - BUILD_PARALLEL_JOBS: 4
      - CMAKE_OPTIONS: -DINTX_FUZZING=ON
    docker:
      - image: ethereum/cpp-build-env:11
    steps:
      - *install-deps
      - checkout
      - *configure
      - *build
      - *test
      - *benchmark
      - restore_cache:
          keys:
            - corpus
      - run:
          name: "Fuzzing"
          working_directory: ~/build
          command: |
            mkdir -p ~/corpus
            test/intx-fuzzer ~/corpus -use_value_profile=1 -max_len=129 -runs=200000
      - save_cache:
          key: corpus-{{ epoch }}
          paths:
            - ~/corpus

  macos:
    environment:
      BUILD_TYPE: Release
      BUILD_PARALLEL_JOBS: 8
      TEST_PARALLEL_JOBS: 8
    macos:
      xcode: 10.2.0
    steps:
      - run:
          name: "Install deps"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake gmp
      - checkout
      - *configure
      - *build
      - *test
      - *benchmark


workflows:
  version: 2
  intx:
    jobs:
      - linux-gcc-asan
      - linux-clang-coverage
      - linux-clang-ubsan
      - fuzzing
      - macos
